{"version":3,"sources":["hooks/useCustomHook.tsx","hooks/useRouteParameters.ts","hooks/useFilmIdParam.tsx","hooks/usePeopleIdParam.tsx","hooks/useFetch.tsx","Peoples.tsx","hooks/usePlanetIdParam.tsx","Planets.tsx","Films.tsx","HookSelect.tsx","App.tsx","index.tsx"],"names":["shouldUseCustomHook","localStorage","getItem","shouldUseRouteMatch","useRouteMatchParams","route","parameters","history","useHistory","parametersRef","useRef","initialParameters","getParameters","location","useState","currentParameters","setCurrentParameters","useEffect","unListen","listen","newParameters","oldParameters","newParametersKeys","Object","keys","oldParametersKeys","length","filter","parameter","parametersHasChanged","current","matched","matchPath","pathname","path","params","reduce","accumulator","matchedParameter","hook","useRouteMatch","useParams","useFetch","url","isLoading","data","state","setState","didCancel","fetch","then","res","json","Peoples","peoples","className","map","people","PeopleElement","id","split","PeopleDetailMemo","usePeople","filmId","useFilmIdParam","to","name","PeopleDetail","usePeopleIdParam","peopleId","skin_color","gender","height","memo","Planets","planets","planet","PlanetElement","PlanetDetailMemo","usePlanet","PlanetDetail","usePlanetIdParam","planetId","climate","gravity","diameter","FilmsList","films","results","useFilms","console","log","film","FilmElement","episode_id","FilmMemo","FilmListMemo","title","Film","useFilm","release_date","director","characters","slice","HookSelect","initialValue","value","setValue","onChange","event","newValue","target","setItem","window","reload","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c8f3f91.chunk.js","sourcesContent":["export function shouldUseCustomHook(): boolean {\n  return localStorage.getItem(\"hookType\") === \"useRouteMatchParams\";\n}\n\nexport function shouldUseRouteMatch(): boolean {\n  return localStorage.getItem(\"hookType\") === \"useRouteMatch\";\n}\n","import { useEffect, useState, useRef } from \"react\";\nimport { matchPath, useHistory, match } from \"react-router-dom\";\nimport { Location } from \"history\";\n\nexport type Parameters = Record<string, string>;\n\nexport function useRouteMatchParams(\n  route: string,\n  parameters?: string[]\n): Parameters {\n  const history = useHistory();\n  const parametersRef = useRef<Parameters>({});\n  const initialParameters = getParameters(history.location, route, parameters);\n  const [currentParameters, setCurrentParameters] = useState(initialParameters);\n\n  useEffect(() => {\n    const unListen = history.listen((location) => {\n      const newParameters = getParameters(location, route, parameters);\n\n      if (parametersHasChanged(newParameters, parametersRef.current)) {\n        parametersRef.current = newParameters;\n        setCurrentParameters(newParameters);\n      }\n    });\n    return () => unListen();\n  }, [history, parametersRef, setCurrentParameters, parameters, route]);\n\n  return currentParameters;\n}\n\nfunction getParameters(\n  location: Location<unknown>,\n  route: string,\n  parameters?: string[]\n): Parameters {\n  const matched: match<Parameters> | null = matchPath<Parameters>(\n    location.pathname,\n    {\n      path: route,\n    }\n  );\n\n  const params =\n    parameters || (matched?.params ? Object.keys(matched.params) : []);\n\n  const matchedParameters = params.reduce(\n    (accumulator: Parameters, parameter): Parameters => {\n      const matchedParameter = matched?.params?.[parameter];\n      if (matchedParameter) {\n        const newAcc = { ...accumulator, [parameter]: matchedParameter };\n\n        return newAcc;\n      }\n\n      return accumulator;\n    },\n    {}\n  );\n\n  return matchedParameters;\n}\n\nfunction parametersHasChanged(\n  newParameters: Parameters,\n  oldParameters: Parameters\n): boolean {\n  const newParametersKeys = Object.keys(newParameters);\n  const oldParametersKeys = Object.keys(oldParameters);\n\n  if (newParametersKeys.length !== oldParametersKeys.length) {\n    return true;\n  }\n\n  const diff = newParametersKeys.filter((parameter) => {\n    return newParameters[parameter] !== oldParameters?.[parameter];\n  });\n\n  return diff.length > 0;\n}\n","import { useParams, useRouteMatch } from \"react-router-dom\";\nimport { shouldUseCustomHook, shouldUseRouteMatch } from \"./useCustomHook\";\nimport { useRouteMatchParams } from \"./useRouteParameters\";\n\nconst useFilmIdParam = (): { filmId: string } => {\n  return useParams();\n};\n\nconst useFilmIdRouteMatch = (): { filmId: string } => {\n  return useRouteMatch(\"/film/:filmId\")?.params as { filmId: string };\n};\n\nconst useFilmIdParamCustom = (): { filmId: string } => {\n  return useRouteMatchParams(\"/film/:filmId\") as { filmId: string };\n};\n\nconst hook = shouldUseCustomHook()\n  ? useFilmIdParamCustom\n  : shouldUseRouteMatch()\n  ? useFilmIdRouteMatch\n  : useFilmIdParam;\n\nexport default hook;\n","import { useParams, useRouteMatch } from \"react-router-dom\";\nimport { shouldUseCustomHook, shouldUseRouteMatch } from \"./useCustomHook\";\nimport { useRouteMatchParams } from \"./useRouteParameters\";\n\nfunction usePeopleIdParam(): { peopleId: string } {\n  return useParams();\n}\n\nfunction usePeopleIdRouteMatch(): { peopleId: string } {\n  return useRouteMatch(\"/film/:filmId/peoples/:peopleId\")?.params as {\n    peopleId: string;\n  };\n}\n\nfunction usePeopleIdParamCustom(): { peopleId: string } {\n  return useRouteMatchParams(\"/film/:filmId/peoples/:peopleId\", [\n    \"peopleId\",\n  ]) as { peopleId: string };\n}\n\nconst hook = shouldUseCustomHook()\n  ? usePeopleIdParamCustom\n  : shouldUseRouteMatch()\n  ? usePeopleIdRouteMatch\n  : usePeopleIdParam;\n\nexport default hook;\n","import { useEffect, useState } from \"react\";\n\ninterface FetchState {\n  isLoading: boolean;\n  data: Record<string, any>;\n}\n\nexport function useFetch(url: string): FetchState {\n  const [state, setState] = useState<FetchState>({ isLoading: true, data: {} });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    setState({ isLoading: true, data: {} });\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((res) => {\n        if (!didCancel) {\n          setState({ isLoading: false, data: res });\n        }\n      });\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  return state;\n}\n","import { Switch, Route, Link } from \"react-router-dom\";\nimport useFilmIdParam from \"./hooks/useFilmIdParam\";\nimport usePeopleIdParam from \"./hooks/usePeopleIdParam\";\nimport { useFetch } from \"./hooks/useFetch\";\nimport { memo } from \"react\";\n\nexport function Peoples({ peoples }: { peoples: string[] }) {\n  return (\n    <div className=\"flex\">\n      <div>\n        <h5>Peoples list:</h5>\n        <ul>\n          {peoples?.map((people) => (\n            <PeopleElement key={people} id={getPeopleIdFromUrl(people)} />\n          ))}\n        </ul>\n      </div>\n      <Switch>\n        <Route path=\"/film/:filmId/peoples/:peopleId\">\n          <PeopleDetailMemo />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction usePeople(id: string) {\n  const { data, isLoading } = useFetch(`https://swapi.dev/api/people/${id}/`);\n\n  return {\n    isLoading,\n    people: data,\n  };\n}\n\nfunction PeopleElement({ id }: { id: string }) {\n  const { filmId } = useFilmIdParam();\n  const { people, isLoading } = usePeople(id);\n\n  return (\n    <li>\n      <Link to={`/film/${filmId}/peoples/${id}`}>\n        {isLoading ? \"...\" : people?.name}\n      </Link>\n    </li>\n  );\n}\n\nfunction PeopleDetail() {\n  const { peopleId } = usePeopleIdParam();\n  const { people, isLoading } = usePeople(peopleId);\n\n  if (isLoading) {\n    return <div>loading</div>;\n  }\n\n  return (\n    <div>\n      <h3>{people?.name}</h3>\n\n      <p>Skin color: {people?.skin_color}</p>\n      <p>Gender: {people?.gender}</p>\n      <p>Height: {people?.height}</p>\n    </div>\n  );\n}\n\nconst PeopleDetailMemo = memo(PeopleDetail);\n\nfunction getPeopleIdFromUrl(url: string) {\n  return url.split(\"people/\")[1].split(\"/\")[0];\n}\n","import { useParams, useRouteMatch } from \"react-router-dom\";\nimport { shouldUseCustomHook, shouldUseRouteMatch } from \"./useCustomHook\";\nimport { useRouteMatchParams } from \"./useRouteParameters\";\n\nfunction usePlanetIdParam(): { planetId: string } {\n  return useParams();\n}\n\nfunction usePlanetIdRouteMatch(): { planetId: string } {\n  return useRouteMatch(\"/film/:filmId/planets/:planetId\")?.params as {\n    planetId: string;\n  };\n}\n\nfunction usePlanetIdParamCustom(): { planetId: string } {\n  return useRouteMatchParams(\"/film/:filmId/planets/:planetId\", [\n    \"planetId\",\n  ]) as { planetId: string };\n}\n\nconst hook = shouldUseCustomHook()\n  ? usePlanetIdParamCustom\n  : shouldUseRouteMatch()\n  ? usePlanetIdRouteMatch\n  : usePlanetIdParam;\n\nexport default hook;\n","import { Switch, Route, Link } from \"react-router-dom\";\nimport useFilmIdParam from \"./hooks/useFilmIdParam\";\nimport usePlanetIdParam from \"./hooks/usePlanetIdParam\";\nimport { useFetch } from \"./hooks/useFetch\";\nimport { memo } from \"react\";\n\nexport function Planets({ planets }: { planets: string[] }) {\n  return (\n    <div className=\"flex\">\n      <div>\n        <h5>Planets list:</h5>\n        <ul>\n          {planets?.map((planet) => (\n            <PlanetElement key={planet} id={getPlanetIdFromUrl(planet)} />\n          ))}\n        </ul>\n      </div>\n      <Switch>\n        <Route path=\"/film/:filmId/planets/:planetId\">\n          <PlanetDetailMemo />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction PlanetElement({ id }: { id: string }) {\n  const { filmId } = useFilmIdParam();\n  const { planet, isLoading } = usePlanet(id);\n\n  return (\n    <li>\n      <Link to={`/film/${filmId}/planets/${id}`}>\n        {isLoading ? \"...\" : planet?.name}\n      </Link>\n    </li>\n  );\n}\n\nfunction PlanetDetail() {\n  const { planetId } = usePlanetIdParam();\n  const { planet } = usePlanet(planetId);\n\n  return (\n    <div>\n      <h3>{planet?.name}</h3>\n\n      <p>Climate: {planet?.climate}</p>\n      <p>Gravity: {planet?.gravity}</p>\n      <p>Diameter: {planet?.diameter}</p>\n    </div>\n  );\n}\n\nconst PlanetDetailMemo = memo(PlanetDetail);\n\nfunction getPlanetIdFromUrl(url: string) {\n  return url.split(\"planets/\")[1].split(\"/\")[0];\n}\n\nfunction usePlanet(id: string) {\n  const { data, isLoading } = useFetch(`https://swapi.dev/api/planets/${id}/`);\n\n  return {\n    isLoading,\n    planet: data,\n  };\n}\n","import { memo } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport { Peoples } from \"./Peoples\";\nimport { Planets } from \"./Planets\";\nimport useFilmIdParam from \"./hooks/useFilmIdParam\";\nimport { useFetch } from \"./hooks/useFetch\";\n\ntype FilmType = Record<string, any>;\n\nfunction useFilms() {\n  const { data, isLoading } = useFetch(\"https://swapi.dev/api/films/\");\n\n  return {\n    isLoading,\n    films: data?.results,\n  };\n}\n\nfunction FilmsList() {\n  const { films, isLoading } = useFilms();\n\n  console.log(\"RENDER FilmsList\", isLoading ? \"isLoading\" : \"\");\n\n  if (isLoading) {\n    return <div>loading</div>;\n  }\n\n  return (\n    <div className=\"flex\">\n      <div>\n        <h2>Films List:</h2>\n        <ul>\n          {films?.map?.((film: FilmType) => (\n            <FilmElement key={film.episode_id} film={film} />\n          ))}\n        </ul>\n      </div>\n      <Switch>\n        <Route path=\"/film/:filmId\">\n          <FilmMemo />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport const FilmListMemo = memo(FilmsList);\n\nfunction FilmElement({ film }: { film: FilmType }) {\n  return (\n    <li key={film.episode_id}>\n      <Link to={`/film/${film.episode_id}`}>{film.title}</Link>\n    </li>\n  );\n}\n\nexport function Film(): JSX.Element {\n  const { filmId } = useFilmIdParam();\n  const { film, isLoading } = useFilm(filmId);\n\n  console.log(\"RENDER FILM\", filmId, isLoading ? \"isLoading\" : film.title);\n\n  if (isLoading) {\n    return <div>loading</div>;\n  }\n\n  return (\n    <div>\n      <h2>{film.title}</h2>\n\n      <p>Release date: {film.release_date}</p>\n      <p>Director: {film.director}</p>\n\n      <p>\n        <Link to={`/film/${filmId}/peoples`}>Peoples</Link>\n        {\" | \"}\n        <Link to={`/film/${filmId}/planets`}>Planets</Link>\n      </p>\n\n      <Switch>\n        <Route path=\"/film/:filmId/peoples\">\n          <Peoples peoples={film.characters.slice(0, 10)} />\n        </Route>\n        <Route path=\"/film/:filmId/planets\">\n          <Planets planets={film.planets.slice(0, 10)} />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nconst FilmMemo = memo(Film);\n\nfunction useFilm(id: string) {\n  const { data, isLoading } = useFetch(`https://swapi.dev/api/films/${id}/`);\n\n  return {\n    isLoading,\n    film: data,\n  };\n}\n","import React, { useState } from \"react\";\n\nexport function HookSelect() {\n  const initialValue = localStorage.getItem(\"hookType\") || \"useParams\";\n  const [value, setValue] = useState<string>(initialValue);\n\n  function onChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newValue = event.target.value;\n    setValue(newValue);\n    localStorage.setItem(\"hookType\", newValue);\n\n    window.location.reload();\n  }\n\n  return (\n    <div>\n      <label>Select type of hook: </label>\n      <select onChange={onChange} value={value}>\n        <option value=\"useParams\">React Router useParams</option>\n        <option value=\"useRouteMatch\">React Router useRouteMatch</option>\n        <option value=\"useRouteMatchParams\">Custom useRouteMatchParams</option>\n      </select>\n      <hr />\n    </div>\n  );\n}\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { FilmListMemo } from \"./Films\";\nimport { HookSelect } from \"./HookSelect\";\n\nexport default function App() {\n  return (\n    <Router basename=\"/react-router-star-wars\">\n      <Switch>\n        <Route path=\"/\">\n          <HookSelect />\n          <FilmListMemo />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}