{"version":3,"sources":["hooks/useCustomHook.tsx","hooks/useRouteMatchParams.ts","hooks/useFilmIdParam.tsx","hooks/usePeopleIdParam.tsx","hooks/useFetch.tsx","Peoples.tsx","hooks/usePlanetIdParam.tsx","Planets.tsx","Films.tsx","Description.tsx","HookSelect.tsx","App.tsx","index.tsx"],"names":["shouldUseCustomHook","localStorage","getItem","shouldUseRouteMatch","useRouteMatchParams","route","parameters","history","useHistory","initialParameters","getParams","location","pathname","parametersRef","useRef","useState","currentParams","setCurrentParams","useEffect","unsubscribe","listen","newParameters","newParams","oldParams","newParamsKeys","Object","keys","oldParamsKeys","length","some","parameter","parametersHasChanged","current","matched","matchPath","params","reduce","accumulator","matchedParameter","assign","hook","useRouteMatch","useParams","useFetch","url","isLoading","data","state","setState","didCancel","fetch","then","res","json","Peoples","peoples","className","map","people","PeopleElement","id","split","path","PeopleDetail","usePeople","filmId","useFilmIdParam","to","name","usePeopleIdParam","peopleId","skin_color","gender","height","Planets","planets","planet","PlanetElement","PlanetDetail","usePlanet","usePlanetIdParam","planetId","climate","gravity","diameter","FilmsList","films","results","useFilms","console","log","film","FilmElement","episode_id","Film","title","useFilm","release_date","director","characters","slice","Description","HookSelect","initialValue","value","setValue","onChange","event","newValue","target","setItem","window","reload","HookPreview","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0f3143a.chunk.js","sourcesContent":["export function shouldUseCustomHook(): boolean {\n  return localStorage.getItem(\"hookType\") === \"useRouteMatchParams\";\n}\n\nexport function shouldUseRouteMatch(): boolean {\n  return localStorage.getItem(\"hookType\") === \"useRouteMatch\";\n}\n","import { useEffect, useState, useRef } from 'react';\nimport { Location } from 'history';\nimport { matchPath, useHistory } from 'react-router-dom';\n\nexport type Params = Record<string, string>;\n\nexport function useRouteMatchParams<TParams extends Params>(route: string, parameters?: string[]): TParams {\n  const history = useHistory();\n  const initialParameters = getParams<TParams>(history.location.pathname, route, parameters);\n  const parametersRef = useRef<TParams>(initialParameters);\n  const [currentParams, setCurrentParams] = useState(initialParameters);\n\n  useEffect(() => {\n    const unsubscribe = history.listen((location: Location): void => {\n      const newParameters = getParams<TParams>(location.pathname, route, parameters);\n\n      if (parametersHasChanged(newParameters, parametersRef.current)) {\n        parametersRef.current = newParameters;\n        setCurrentParams(newParameters);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [history, parametersRef, setCurrentParams, parameters, route]);\n\n  return currentParams;\n}\n\nfunction getParams<TParams extends Params>(pathname: string, route: string, parameters?: string[]): TParams {\n  const matched = matchPath<TParams>(pathname, route);\n  const params = parameters || (matched ? Object.keys(matched.params) : []);\n\n  return params.reduce((accumulator: TParams, parameter: string): TParams => {\n    const matchedParameter = matched?.params[parameter];\n\n    if (matchedParameter) {\n      return Object.assign(accumulator, { [parameter]: matchedParameter });\n    }\n\n    return accumulator;\n  }, {} as TParams);\n}\n\nfunction parametersHasChanged(newParams: Params, oldParams: Params): boolean {\n  const newParamsKeys = Object.keys(newParams);\n  const oldParamsKeys = Object.keys(oldParams);\n\n  if (newParamsKeys.length !== oldParamsKeys.length) {\n    return true;\n  }\n\n  return newParamsKeys.some((parameter: string) => newParams[parameter] !== oldParams[parameter]);\n}\n","import { useParams, useRouteMatch } from \"react-router-dom\";\nimport { shouldUseCustomHook, shouldUseRouteMatch } from \"./useCustomHook\";\nimport { useRouteMatchParams } from \"./useRouteMatchParams\";\n\nconst useFilmIdParam = (): { filmId: string } => {\n  return useParams();\n};\n\nconst useFilmIdRouteMatch = (): { filmId: string } => {\n  return useRouteMatch(\"/film/:filmId\")?.params as { filmId: string };\n};\n\nconst useFilmIdParamCustom = (): { filmId: string } => {\n  return useRouteMatchParams(\"/film/:filmId\") as { filmId: string };\n};\n\nconst hook = shouldUseCustomHook()\n  ? useFilmIdParamCustom\n  : shouldUseRouteMatch()\n  ? useFilmIdRouteMatch\n  : useFilmIdParam;\n\nexport default hook;\n","import { useParams, useRouteMatch } from \"react-router-dom\";\nimport { shouldUseCustomHook, shouldUseRouteMatch } from \"./useCustomHook\";\nimport { useRouteMatchParams } from \"./useRouteMatchParams\";\n\nfunction usePeopleIdParam(): { peopleId: string } {\n  return useParams();\n}\n\nfunction usePeopleIdRouteMatch(): { peopleId: string } {\n  return useRouteMatch(\"/film/:filmId/peoples/:peopleId\")?.params as {\n    peopleId: string;\n  };\n}\n\nfunction usePeopleIdParamCustom(): { peopleId: string } {\n  return useRouteMatchParams(\"/film/:filmId/peoples/:peopleId\", [\n    \"peopleId\",\n  ]) as { peopleId: string };\n}\n\nconst hook = shouldUseCustomHook()\n  ? usePeopleIdParamCustom\n  : shouldUseRouteMatch()\n  ? usePeopleIdRouteMatch\n  : usePeopleIdParam;\n\nexport default hook;\n","import { useEffect, useState } from \"react\";\n\ninterface FetchState {\n  isLoading: boolean;\n  data: Record<string, any>;\n}\n\nexport function useFetch(url: string): FetchState {\n  const [state, setState] = useState<FetchState>({ isLoading: true, data: {} });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    setState({ isLoading: true, data: {} });\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((res) => {\n        if (!didCancel) {\n          setState({ isLoading: false, data: res });\n        }\n      });\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  return state;\n}\n","import { Switch, Route, Link } from \"react-router-dom\";\n\nimport useFilmIdParam from \"./hooks/useFilmIdParam\";\nimport usePeopleIdParam from \"./hooks/usePeopleIdParam\";\nimport { useFetch } from \"./hooks/useFetch\";\n\nexport function Peoples({ peoples }: { peoples: string[] }) {\n  return (\n    <div className=\"flex\">\n      <div>\n        <h5>Peoples list:</h5>\n        <ul>\n          {peoples?.map((people) => (\n            <PeopleElement key={people} id={getPeopleIdFromUrl(people)} />\n          ))}\n        </ul>\n      </div>\n      <Switch>\n        <Route path=\"/film/:filmId/peoples/:peopleId\">\n          <PeopleDetail />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction usePeople(id: string) {\n  const { data, isLoading } = useFetch(`https://swapi.dev/api/people/${id}/`);\n\n  return {\n    isLoading,\n    people: data,\n  };\n}\n\nfunction PeopleElement({ id }: { id: string }) {\n  const { filmId } = useFilmIdParam();\n  const { people, isLoading } = usePeople(id);\n\n  return (\n    <li>\n      <Link to={`/film/${filmId}/peoples/${id}`}>\n        {isLoading ? \"...\" : people?.name}\n      </Link>\n    </li>\n  );\n}\n\nfunction PeopleDetail() {\n  const { peopleId } = usePeopleIdParam();\n  const { people, isLoading } = usePeople(peopleId);\n\n  if (isLoading) {\n    return <div>loading</div>;\n  }\n\n  return (\n    <div>\n      <h3>{people?.name}</h3>\n\n      <p>Skin color: {people?.skin_color}</p>\n      <p>Gender: {people?.gender}</p>\n      <p>Height: {people?.height}</p>\n    </div>\n  );\n}\n\nfunction getPeopleIdFromUrl(url: string) {\n  return url.split(\"people/\")[1].split(\"/\")[0];\n}\n","import { useParams, useRouteMatch } from \"react-router-dom\";\nimport { shouldUseCustomHook, shouldUseRouteMatch } from \"./useCustomHook\";\nimport { useRouteMatchParams } from \"./useRouteMatchParams\";\n\nfunction usePlanetIdParam(): { planetId: string } {\n  return useParams();\n}\n\nfunction usePlanetIdRouteMatch(): { planetId: string } {\n  return useRouteMatch(\"/film/:filmId/planets/:planetId\")?.params as {\n    planetId: string;\n  };\n}\n\nfunction usePlanetIdParamCustom(): { planetId: string } {\n  return useRouteMatchParams(\"/film/:filmId/planets/:planetId\", [\n    \"planetId\",\n  ]) as { planetId: string };\n}\n\nconst hook = shouldUseCustomHook()\n  ? usePlanetIdParamCustom\n  : shouldUseRouteMatch()\n  ? usePlanetIdRouteMatch\n  : usePlanetIdParam;\n\nexport default hook;\n","import { Switch, Route, Link } from \"react-router-dom\";\n\nimport useFilmIdParam from \"./hooks/useFilmIdParam\";\nimport usePlanetIdParam from \"./hooks/usePlanetIdParam\";\nimport { useFetch } from \"./hooks/useFetch\";\n\nexport function Planets({ planets }: { planets: string[] }) {\n  return (\n    <div className=\"flex\">\n      <div>\n        <h5>Planets list:</h5>\n        <ul>\n          {planets?.map((planet) => (\n            <PlanetElement key={planet} id={getPlanetIdFromUrl(planet)} />\n          ))}\n        </ul>\n      </div>\n      <Switch>\n        <Route path=\"/film/:filmId/planets/:planetId\">\n          <PlanetDetail />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction PlanetElement({ id }: { id: string }) {\n  const { filmId } = useFilmIdParam();\n  const { planet, isLoading } = usePlanet(id);\n\n  return (\n    <li>\n      <Link to={`/film/${filmId}/planets/${id}`}>\n        {isLoading ? \"...\" : planet?.name}\n      </Link>\n    </li>\n  );\n}\n\nfunction PlanetDetail() {\n  const { planetId } = usePlanetIdParam();\n  const { planet } = usePlanet(planetId);\n\n  return (\n    <div>\n      <h3>{planet?.name}</h3>\n\n      <p>Climate: {planet?.climate}</p>\n      <p>Gravity: {planet?.gravity}</p>\n      <p>Diameter: {planet?.diameter}</p>\n    </div>\n  );\n}\n\nfunction getPlanetIdFromUrl(url: string) {\n  return url.split(\"planets/\")[1].split(\"/\")[0];\n}\n\nfunction usePlanet(id: string) {\n  const { data, isLoading } = useFetch(`https://swapi.dev/api/planets/${id}/`);\n\n  return {\n    isLoading,\n    planet: data,\n  };\n}\n","import { Switch, Route, Link } from \"react-router-dom\";\n\nimport { Peoples } from \"./Peoples\";\nimport { Planets } from \"./Planets\";\nimport useFilmIdParam from \"./hooks/useFilmIdParam\";\nimport { useFetch } from \"./hooks/useFetch\";\n\ntype FilmType = Record<string, any>;\n\nfunction useFilms() {\n  const { data, isLoading } = useFetch(\"https://swapi.dev/api/films/\");\n\n  return {\n    isLoading,\n    films: data?.results,\n  };\n}\n\nexport function FilmsList() {\n  const { films, isLoading } = useFilms();\n\n  console.log(\"RENDER FilmsList\", isLoading ? \"isLoading\" : \"\");\n\n  if (isLoading) {\n    return <div>loading</div>;\n  }\n\n  return (\n    <div className=\"flex\">\n      <div>\n        <h2>Films List:</h2>\n        <ul>\n          {films?.map?.((film: FilmType) => (\n            <FilmElement key={film.episode_id} film={film} />\n          ))}\n        </ul>\n      </div>\n      <Switch>\n        <Route path=\"/film/:filmId\">\n          <Film />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction FilmElement({ film }: { film: FilmType }) {\n  return (\n    <li key={film.episode_id}>\n      <Link to={`/film/${film.episode_id}`}>{film.title}</Link>\n    </li>\n  );\n}\n\nexport function Film(): JSX.Element {\n  const { filmId } = useFilmIdParam();\n  const { film, isLoading } = useFilm(filmId);\n\n  console.log(\"RENDER FILM\", filmId, isLoading ? \"isLoading\" : film.title);\n\n  if (isLoading) {\n    return <div>loading</div>;\n  }\n\n  return (\n    <div>\n      <h2>{film.title}</h2>\n\n      <p>Release date: {film.release_date}</p>\n      <p>Director: {film.director}</p>\n\n      <p>\n        <Link to={`/film/${filmId}/peoples`}>Peoples</Link>\n        {\" | \"}\n        <Link to={`/film/${filmId}/planets`}>Planets</Link>\n      </p>\n\n      <Switch>\n        <Route path=\"/film/:filmId/peoples\">\n          <Peoples peoples={film.characters.slice(0, 10)} />\n        </Route>\n        <Route path=\"/film/:filmId/planets\">\n          <Planets planets={film.planets.slice(0, 10)} />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction useFilm(id: string) {\n  const { data, isLoading } = useFetch(`https://swapi.dev/api/films/${id}/`);\n\n  return {\n    isLoading,\n    film: data,\n  };\n}\n","export function Description() {\n  return (\n    <div>\n      <h1>React Router Star Wars</h1>\n\n      <p>Show and compare different hook implementation to get route props from current URL.</p>\n    </div>\n  )\n}\n","import React, { useState } from \"react\";\n\nexport function HookSelect() {\n  const initialValue = localStorage.getItem(\"hookType\") || \"useParams\";\n  const [value, setValue] = useState<string>(initialValue);\n\n  function onChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newValue = event.target.value;\n    setValue(newValue);\n    localStorage.setItem(\"hookType\", newValue);\n\n    window.location.reload();\n  }\n\n  return (\n    <div>\n      <p>\n        <label>Select type of hook: </label>\n\n        <select onChange={onChange} value={value}>\n          <option value=\"useParams\">React Router useParams</option>\n          <option value=\"useRouteMatch\">React Router useRouteMatch</option>\n          <option value=\"useRouteMatchParams\">Custom useRouteMatchParams</option>\n        </select>\n      </p>\n\n      <HookPreview value={value} />\n    </div>\n  );\n}\n\nfunction HookPreview({ value }: { value: string }) {\n  switch (value) {\n    case 'useParams':\n      return (\n        <pre>\n          <code>\n            {'const { filmId } = useParams();'}\n          </code>\n        </pre>\n      );\n\n    case 'useRouteMatch':\n      return (\n        <pre>\n          <code>\n            {'const { filmId } = useRouteMatch(\"/film/:filmId\")?.params;'}\n          </code>\n        </pre>\n      );\n\n    case 'useRouteMatchParams':\n      return (\n        <pre>\n          <code>\n            {'const { filmId } = useRouteMatchParams(\"/film/:filmId\");'}\n          </code>\n        </pre>\n      );\n\n    default:\n      return <span></span>;\n  }\n}\n","import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { FilmsList } from \"./Films\";\nimport { Description } from \"./Description\";\nimport { HookSelect } from \"./HookSelect\";\n\nexport default function App() {\n  return (\n    <Router basename=\"/react-router-star-wars\">\n      <Switch>\n        <Route path=\"/\">\n          <Description />\n          <HookSelect />\n\n          <hr />\n\n          <FilmsList />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}